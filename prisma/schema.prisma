// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  externalId String? @unique

  quotaLimit Int
  plan       Plan @default(FREE)

  email     String   @unique
  apiKey    String   @unique @default(cuid())
  discordId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1:n relation mapping
  EventCategories EventCategory[]
  Event           Event[]
  Quota           Quota[]

  @@index([email, apiKey])
}

model EventCategory {
  id    String  @id @default(cuid())
  name  String
  color String
  emoji String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Event     Event[]

  @@unique([name, userId])
}

model Event {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  name   String
  fields Json

  deliveryStatus DeliveryStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  EventCategory   EventCategory @relation(fields: [eventCategoryId], references: [id])
  eventCategoryId String

  @@index([createdAt])
}

model Quota {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  year  Int
  month Int
  count Int @default(0)

  updatedAt DateTime @updatedAt
}

enum DeliveryStatus {
  PENDING
  FAILED
  DELIVERED
}

enum Plan {
  FREE
  PRO
}
